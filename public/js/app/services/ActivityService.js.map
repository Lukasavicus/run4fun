{"version":3,"sources":["../../app-es6/services/ActivityService.js"],"names":["HttpService","Activity","ActivityService","_httpService","Promise","resolve","reject","get","then","activities_obj","map","Date","activity_obj","date","physical_activity","place","route_distance","time","catch","console","log","error","activity","post","method","body","JSON","stringify","headers","user_obj","response"],"mappings":";;;;;;;;;;;;;;;AAAQA,uB,gBAAAA,W;;AACAC,oB,mBAAAA,Q;;;;;;;;;;;;;;;;;;;;;uCAEKC,e;AACT,2CAAa;AAAA;;AACT,yBAAKC,YAAL,GAAoB,IAAIH,WAAJ,EAApB;AACH;;;;wDAEkB;AAAA;;AACf,+BAAO,IAAII,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,kCAAKH,YAAL,CACCI,GADD,CACK,gBADL,EAECC,IAFD,CAEM;AAAA,uCACFH,QAAQI,eAAeC,GAAf,CAAmB;AAAA,2CACvB,IAAIT,QAAJ,CACI,IAAIU,IAAJ,CAASC,aAAaC,IAAtB,CADJ,EAEID,aAAaE,iBAFjB,EAGIF,aAAaG,KAHjB,EAIIH,aAAaI,cAJjB,EAKIJ,aAAaK,IALjB,CADuB;AAAA,iCAAnB,CAAR,CADE;AAAA,6BAFN,EAaCC,KAbD,CAaO,iBAAS;AACZC,wCAAQC,GAAR,CAAYC,KAAZ;AACAf;AACH,6BAhBD;AAiBH,yBAlBM,CAAP;;AAoBA;;;;;AAKH;;;gDAEWgB,Q,EAAS;AAAA;;AACjB,+BAAO,IAAIlB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,mCAAKH,YAAL,CACCoB,IADD,CACM,gBADN,EACwB;AACpBC,wCAAS,MADW;AAEpBC,sCAAMC,KAAKC,SAAL,CAAe;AACjB,4CAASL,SAAST,IADD;AAEjB,yDAAsBS,SAASR,iBAFd;AAGjB,6CAAUQ,SAASP,KAHF;AAIjB,sDAAmBO,SAASN,cAJX;AAKjB,4CAASM,SAASL;AALD,iCAAf,CAFc;AASpBW,yCAAS;AACT,oDAAgB;AAChB;AAFS;AATW,6BADxB,EAcG,IAdH,EAeCpB,IAfD,CAeM,oBAAY;AACd,oCAAIqB,WAAWC,SAAS,iBAAT,CAAf;AACAX,wCAAQC,GAAR,CAAYS,QAAZ;AACA,oCAAIjB,eAAekB,SAAS,UAAT,CAAnB;AACAzB,wCAAQ,IAAIJ,QAAJ,CACA,IAAIU,IAAJ,CAASC,aAAaC,IAAtB,CADA,EAEAD,aAAaE,iBAFb,EAGAF,aAAaG,KAHb,EAIAH,aAAaI,cAJb,EAKAJ,aAAaK,IALb,CAAR;AAQH,6BA3BD,EA4BCC,KA5BD,CA4BO,iBAAS;AACZC,wCAAQC,GAAR,CAAYC,KAAZ;AACAf;AACH,6BA/BD;AAgCH,yBAjCM,CAAP;AAkCH","file":"ActivityService.js","sourcesContent":["import {HttpService} from './HttpService';\r\nimport {Activity} from '../models/Activity';\r\n\r\nexport class ActivityService {\r\n    constructor(){\r\n        this._httpService = new HttpService();\r\n    }\r\n\r\n    getUserActivities(){\r\n        return new Promise((resolve, reject) => {\r\n            this._httpService\r\n            .get('/v1/activities')\r\n            .then(activities_obj =>\r\n                resolve(activities_obj.map(activity_obj =>\r\n                    new Activity(\r\n                        new Date(activity_obj.date),\r\n                        activity_obj.physical_activity,\r\n                        activity_obj.place,\r\n                        activity_obj.route_distance,\r\n                        activity_obj.time\r\n                    )\r\n                ))\r\n            )\r\n            .catch(error => {\r\n                console.log(error);\r\n                reject(`Could not get activities for user`);\r\n            });\r\n        });\r\n        \r\n        /*\r\n        return this._httpService\r\n            .get('/v1/activities')\r\n            .then(activities => console.log());\r\n        */\r\n    }\r\n\r\n    addActivity(activity){\r\n        return new Promise((resolve, reject) => {\r\n            this._httpService\r\n            .post('/v1/activities', {\r\n                method : 'POST',\r\n                body: JSON.stringify({\r\n                    'date' : activity.date,\r\n                    'physical_activity' : activity.physical_activity,\r\n                    'place' : activity.place,\r\n                    'route_distance' : activity.route_distance,\r\n                    'time' : activity.time,\r\n                }),\r\n                headers: {\r\n                'Content-Type': 'application/json'\r\n                // 'Content-Type': 'application/x-www-form-urlencoded',\r\n                },\r\n            }, true)\r\n            .then(response => {\r\n                let user_obj = response['user_activities'];\r\n                console.log(user_obj);\r\n                let activity_obj = response['activity'];\r\n                resolve(new Activity(\r\n                        new Date(activity_obj.date),\r\n                        activity_obj.physical_activity,\r\n                        activity_obj.place,\r\n                        activity_obj.route_distance,\r\n                        activity_obj.time\r\n                    )\r\n                )\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                reject(`Could not create activities for user`);\r\n            });\r\n        });\r\n    }\r\n\r\n}\r\n"]}