{"version":3,"sources":["../../app-es6/services/UserService.js"],"names":["HttpService","Activity","Badge","Collectible","Transaction","UserService","_httpService","Promise","resolve","reject","get","then","user_obj","catch","console","log","error","collectibles_obj","map","collectible_obj","_id","title","icon","value","serie","hist","owned","description","badges_obj","badge_obj","activities_obj","Date","activity_obj","date","physical_activity","place","route_distance","time","transactions_obj","transaction_obj","type","activity","post","method","body","JSON","stringify","headers","response","collectible_id","res","activity_id","delete"],"mappings":"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","file":"UserService.js","sourcesContent":["import {HttpService} from './HttpService';\r\n\r\nimport {Activity} from '../models/Activity';\r\nimport {Badge} from '../models/Badge';\r\nimport {Collectible} from '../models/Collectible';\r\nimport {Transaction} from '../models/Transaction';\r\n\r\nexport class UserService {\r\n    constructor(){\r\n        this._httpService = new HttpService();\r\n    }\r\n\r\n    //User\r\n    getUserInfo(){\r\n        return new Promise((resolve, reject) => {\r\n            this._httpService\r\n            .get('/v1/user')\r\n            .then(user_obj => resolve(user_obj))\r\n            .catch(error => {\r\n                console.log(error);\r\n                reject(`Could not get collectibles for user`);\r\n            });\r\n        });\r\n    }\r\n\r\n    //Collectibles\r\n    getUserCollectibles(){\r\n        return new Promise((resolve, reject) => {\r\n            this._httpService\r\n            .get('/v1/users/collectibles')\r\n            .then(collectibles_obj => resolve(collectibles_obj.map(collectible_obj =>\r\n                    new Collectible(\r\n                        collectible_obj._id,\r\n                        collectible_obj.title,\r\n                        collectible_obj.icon,\r\n                        collectible_obj.value,\r\n                        collectible_obj.serie,\r\n                        collectible_obj.hist,\r\n                        collectible_obj.owned,\r\n                        collectible_obj.description\r\n                    ))\r\n            ))\r\n            .catch(error => {\r\n                console.log(error);\r\n                reject(`Could not get collectibles for user`);\r\n            });\r\n        });\r\n    }\r\n\r\n    //Badges\r\n    getUserBadges(){\r\n        return new Promise((resolve, reject) => {\r\n            this._httpService\r\n            .get('/v1/users/badges')\r\n            .then(badges_obj =>\r\n                resolve(badges_obj.map(badge_obj =>\r\n                    new Badge(\r\n                        badge_obj.title,\r\n                        badge_obj.icon,\r\n                        badge_obj.description\r\n                    )\r\n                ))\r\n            )\r\n            .catch(error => {\r\n                console.log(error);\r\n                reject(`Could not get badges for user`);\r\n            });\r\n        });\r\n    }\r\n\r\n    // Activities\r\n    getUserActivities(){\r\n        return new Promise((resolve, reject) => {\r\n            this._httpService\r\n            .get('/v1/activities')\r\n            .then(activities_obj =>\r\n                resolve(activities_obj.map(activity_obj =>\r\n                    new Activity(\r\n                        new Date(activity_obj.date),\r\n                        activity_obj.physical_activity,\r\n                        activity_obj.place,\r\n                        activity_obj.route_distance,\r\n                        activity_obj.time,\r\n                        activity_obj._id\r\n                    )\r\n                ))\r\n            )\r\n            .catch(error => {\r\n                console.log(error);\r\n                reject(`Could not get activities for user`);\r\n            });\r\n        });\r\n        \r\n        /*\r\n        return this._httpService\r\n            .get('/v1/activities')\r\n            .then(activities => console.log());\r\n        */\r\n    }\r\n\r\n    // Transactions\r\n    getUserTransactions(){\r\n        return new Promise((resolve, reject) => {\r\n            this._httpService\r\n            .get('/v1/transactions')\r\n            .then(transactions_obj =>\r\n                resolve(transactions_obj.map(transaction_obj =>\r\n                    new Transaction(\r\n                        new Date(transaction_obj.date),\r\n                        transaction_obj.value,\r\n                        transaction_obj.type,\r\n                        transaction_obj.description,\r\n                    )\r\n                ))\r\n            )\r\n            .catch(error => {\r\n                console.log(error);\r\n                reject(`Could not get transactions for user`);\r\n            });\r\n        });\r\n    }\r\n\r\n    addActivity(activity){\r\n        return new Promise((resolve, reject) => {\r\n            this._httpService\r\n            .post('/v1/activities', {\r\n                method : 'POST',\r\n                body: JSON.stringify({\r\n                    'date' : activity.date,\r\n                    'physical_activity' : activity.physical_activity,\r\n                    'place' : activity.place,\r\n                    'route_distance' : activity.route_distance,\r\n                    'time' : activity.time,\r\n                }),\r\n                headers: {\r\n                'Content-Type': 'application/json'\r\n                // 'Content-Type': 'application/x-www-form-urlencoded',\r\n                },\r\n            }, true)\r\n            .then(response => {\r\n                let user_obj = response['user_activities'];\r\n                console.log(user_obj);\r\n                let activity_obj = response['activity'];\r\n                resolve(new Activity(\r\n                        new Date(activity_obj.date),\r\n                        activity_obj.physical_activity,\r\n                        activity_obj.place,\r\n                        activity_obj.route_distance,\r\n                        activity_obj.time\r\n                    )\r\n                )\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                reject(`Could not create activities for user`);\r\n            });\r\n        });\r\n    }\r\n\r\n    purchaseCollectible(collectible_id){\r\n        // TODO: Try to use patch\r\n        // return new Promise((resolve, reject) => {\r\n        //     this._httpService\r\n        //         .patch(`/v1/collectibles/${collectible_id}`)\r\n        //         .then(res => resolve(res));\r\n        // });\r\n        return new Promise((resolve, reject) => {\r\n            this._httpService\r\n                .get(`/v1/collectible/purchase/${collectible_id}`)\r\n                // .then(res => {console.log('RES SERVICE', res); return resolve(res)});\r\n                .then(res => {\r\n                    // console.log('RES SERVICE', res);\r\n                    resolve(res);\r\n                })\r\n                .catch(res => {\r\n                    // console.log('RES SERVICE ERROR', res);\r\n                    reject(res);\r\n                });\r\n        });\r\n    }\r\n\r\n    removeActivity(activity_id){\r\n        return new Promise((resolve, reject) => {\r\n            this._httpService\r\n            .delete(`/v1/activities/${activity_id}`)\r\n            .then(response => {\r\n                console.log(\"Depois do delete\", response);\r\n                resolve(response);\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                reject(`Could not delete activity for user`);\r\n            });\r\n        });\r\n    }\r\n\r\n}\r\n"]}