{"version":3,"sources":["../../app-es6/services/UserService.js"],"names":["HttpService","Activity","Badge","Collectible","UserService","_httpService","Promise","resolve","reject","get","then","user_obj","catch","console","log","error","collectibles_obj","map","badge_obj","title","icon","value","serie","hist","owned","description","badges_obj","activities_obj","Date","activity_obj","date","physical_activity","place","route_distance","time","activity","post","method","body","JSON","stringify","headers","response"],"mappings":";;;;;;;;;;;;;;;AAAQA,uB,gBAAAA,W;;AAEAC,oB,mBAAAA,Q;;AACAC,iB,gBAAAA,K;;AACAC,uB,sBAAAA,W;;;;;;;;;;;;;;;;;;;;;mCAEKC,W;AACT,uCAAa;AAAA;;AACT,yBAAKC,YAAL,GAAoB,IAAIL,WAAJ,EAApB;AACH;;AAED;;;;;kDACa;AAAA;;AACT,+BAAO,IAAIM,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,kCAAKH,YAAL,CACCI,GADD,CACK,UADL,EAECC,IAFD,CAEM;AAAA,uCAAYH,QAAQI,QAAR,CAAZ;AAAA,6BAFN,EAGCC,KAHD,CAGO,iBAAS;AACZC,wCAAQC,GAAR,CAAYC,KAAZ;AACAP;AACH,6BAND;AAOH,yBARM,CAAP;AASH;;;0DAGoB;AAAA;;AACjB,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,mCAAKH,YAAL,CACCI,GADD,CACK,wBADL,EAECC,IAFD,CAEM;AAAA,uCAAoBH,QAAQS,iBAAiBC,GAAjB,CAAqB;AAAA,2CAC/C,IAAId,WAAJ,CACIe,UAAUC,KADd,EAEID,UAAUE,IAFd,EAGIF,UAAUG,KAHd,EAIIH,UAAUI,KAJd,EAKIJ,UAAUK,IALd,EAMIL,UAAUM,KANd,EAOIN,UAAUO,WAPd,CAD+C;AAAA,iCAArB,CAAR,CAApB;AAAA,6BAFN,EAaCb,KAbD,CAaO,iBAAS;AACZC,wCAAQC,GAAR,CAAYC,KAAZ;AACAP;AACH,6BAhBD;AAiBH,yBAlBM,CAAP;AAmBH;;;oDAGc;AAAA;;AACX,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,mCAAKH,YAAL,CACCI,GADD,CACK,kBADL,EAECC,IAFD,CAEM;AAAA,uCACFH,QAAQmB,WAAWT,GAAX,CAAe;AAAA,2CACnB,IAAIf,KAAJ,CACIgB,UAAUC,KADd,EAEID,UAAUE,IAFd,EAGIF,UAAUO,WAHd,CADmB;AAAA,iCAAf,CAAR,CADE;AAAA,6BAFN,EAWCb,KAXD,CAWO,iBAAS;AACZC,wCAAQC,GAAR,CAAYC,KAAZ;AACAP;AACH,6BAdD;AAeH,yBAhBM,CAAP;AAiBH;;;wDAGkB;AAAA;;AACf,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,mCAAKH,YAAL,CACCI,GADD,CACK,gBADL,EAECC,IAFD,CAEM;AAAA,uCACFH,QAAQoB,eAAeV,GAAf,CAAmB;AAAA,2CACvB,IAAIhB,QAAJ,CACI,IAAI2B,IAAJ,CAASC,aAAaC,IAAtB,CADJ,EAEID,aAAaE,iBAFjB,EAGIF,aAAaG,KAHjB,EAIIH,aAAaI,cAJjB,EAKIJ,aAAaK,IALjB,CADuB;AAAA,iCAAnB,CAAR,CADE;AAAA,6BAFN,EAaCtB,KAbD,CAaO,iBAAS;AACZC,wCAAQC,GAAR,CAAYC,KAAZ;AACAP;AACH,6BAhBD;AAiBH,yBAlBM,CAAP;;AAoBA;;;;;AAKH;;;gDAEW2B,Q,EAAS;AAAA;;AACjB,+BAAO,IAAI7B,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,mCAAKH,YAAL,CACC+B,IADD,CACM,gBADN,EACwB;AACpBC,wCAAS,MADW;AAEpBC,sCAAMC,KAAKC,SAAL,CAAe;AACjB,4CAASL,SAASL,IADD;AAEjB,yDAAsBK,SAASJ,iBAFd;AAGjB,6CAAUI,SAASH,KAHF;AAIjB,sDAAmBG,SAASF,cAJX;AAKjB,4CAASE,SAASD;AALD,iCAAf,CAFc;AASpBO,yCAAS;AACT,oDAAgB;AAChB;AAFS;AATW,6BADxB,EAcG,IAdH,EAeC/B,IAfD,CAeM,oBAAY;AACd,oCAAIC,WAAW+B,SAAS,iBAAT,CAAf;AACA7B,wCAAQC,GAAR,CAAYH,QAAZ;AACA,oCAAIkB,eAAea,SAAS,UAAT,CAAnB;AACAnC,wCAAQ,IAAIN,QAAJ,CACA,IAAI2B,IAAJ,CAASC,aAAaC,IAAtB,CADA,EAEAD,aAAaE,iBAFb,EAGAF,aAAaG,KAHb,EAIAH,aAAaI,cAJb,EAKAJ,aAAaK,IALb,CAAR;AAQH,6BA3BD,EA4BCtB,KA5BD,CA4BO,iBAAS;AACZC,wCAAQC,GAAR,CAAYC,KAAZ;AACAP;AACH,6BA/BD;AAgCH,yBAjCM,CAAP;AAkCH","file":"UserService.js","sourcesContent":["import {HttpService} from './HttpService';\r\n\r\nimport {Activity} from '../models/Activity';\r\nimport {Badge} from '../models/Badge';\r\nimport {Collectible} from '../models/Collectible';\r\n\r\nexport class UserService {\r\n    constructor(){\r\n        this._httpService = new HttpService();\r\n    }\r\n\r\n    //User\r\n    getUserInfo(){\r\n        return new Promise((resolve, reject) => {\r\n            this._httpService\r\n            .get('/v1/user')\r\n            .then(user_obj => resolve(user_obj))\r\n            .catch(error => {\r\n                console.log(error);\r\n                reject(`Could not get collectibles for user`);\r\n            });\r\n        });\r\n    }\r\n\r\n    //Collectibles\r\n    getUserCollectibles(){\r\n        return new Promise((resolve, reject) => {\r\n            this._httpService\r\n            .get('/v1/users/collectibles')\r\n            .then(collectibles_obj => resolve(collectibles_obj.map(badge_obj =>\r\n                    new Collectible(\r\n                        badge_obj.title,\r\n                        badge_obj.icon,\r\n                        badge_obj.value,\r\n                        badge_obj.serie,\r\n                        badge_obj.hist,\r\n                        badge_obj.owned,\r\n                        badge_obj.description\r\n                    ))\r\n            ))\r\n            .catch(error => {\r\n                console.log(error);\r\n                reject(`Could not get collectibles for user`);\r\n            });\r\n        });\r\n    }\r\n\r\n    //Badges\r\n    getUserBadges(){\r\n        return new Promise((resolve, reject) => {\r\n            this._httpService\r\n            .get('/v1/users/badges')\r\n            .then(badges_obj =>\r\n                resolve(badges_obj.map(badge_obj =>\r\n                    new Badge(\r\n                        badge_obj.title,\r\n                        badge_obj.icon,\r\n                        badge_obj.description\r\n                    )\r\n                ))\r\n            )\r\n            .catch(error => {\r\n                console.log(error);\r\n                reject(`Could not get badges for user`);\r\n            });\r\n        });\r\n    }\r\n\r\n    // Activities\r\n    getUserActivities(){\r\n        return new Promise((resolve, reject) => {\r\n            this._httpService\r\n            .get('/v1/activities')\r\n            .then(activities_obj =>\r\n                resolve(activities_obj.map(activity_obj =>\r\n                    new Activity(\r\n                        new Date(activity_obj.date),\r\n                        activity_obj.physical_activity,\r\n                        activity_obj.place,\r\n                        activity_obj.route_distance,\r\n                        activity_obj.time\r\n                    )\r\n                ))\r\n            )\r\n            .catch(error => {\r\n                console.log(error);\r\n                reject(`Could not get activities for user`);\r\n            });\r\n        });\r\n        \r\n        /*\r\n        return this._httpService\r\n            .get('/v1/activities')\r\n            .then(activities => console.log());\r\n        */\r\n    }\r\n\r\n    addActivity(activity){\r\n        return new Promise((resolve, reject) => {\r\n            this._httpService\r\n            .post('/v1/activities', {\r\n                method : 'POST',\r\n                body: JSON.stringify({\r\n                    'date' : activity.date,\r\n                    'physical_activity' : activity.physical_activity,\r\n                    'place' : activity.place,\r\n                    'route_distance' : activity.route_distance,\r\n                    'time' : activity.time,\r\n                }),\r\n                headers: {\r\n                'Content-Type': 'application/json'\r\n                // 'Content-Type': 'application/x-www-form-urlencoded',\r\n                },\r\n            }, true)\r\n            .then(response => {\r\n                let user_obj = response['user_activities'];\r\n                console.log(user_obj);\r\n                let activity_obj = response['activity'];\r\n                resolve(new Activity(\r\n                        new Date(activity_obj.date),\r\n                        activity_obj.physical_activity,\r\n                        activity_obj.place,\r\n                        activity_obj.route_distance,\r\n                        activity_obj.time\r\n                    )\r\n                )\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                reject(`Could not create activities for user`);\r\n            });\r\n        });\r\n    }\r\n\r\n}\r\n"]}